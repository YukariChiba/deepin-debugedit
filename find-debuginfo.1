.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.48.3.
.TH FIND-DEBUGINFO "1" "July 2021" "find-debuginfo 5.0" "User Commands"
.SH NAME
find-debuginfo \- finds debuginfo and processes it
.SH SYNOPSIS
.B find-debuginfo
[\fI\,OPTION\/\fR]... [\fI\,builddir\/\fR]
.SH DESCRIPTION
automagically generates debug info and file lists
.SH OPTIONS
[\-\-strict\-build\-id] [\-g] [\-r] [\-m] [\-i] [\-n]
[\-\-keep\-section SECTION] [\-\-remove\-section SECTION]
[\-\-g\-libs]
[\-j N] [\-\-jobs N]
[\-o debugfiles.list]
[\-S debugsourcefiles.list]
[\-\-run\-dwz] [\-\-dwz\-low\-mem\-die\-limit N]
[\-\-dwz\-max\-die\-limit N]
[\-\-dwz\-single\-file\-mode]
[\-\-build\-id\-seed SEED]
[\-\-unique\-debug\-suffix SUFFIX]
[\-\-unique\-debug\-src\-base BASE]
[[\-l filelist]... [\-p 'pattern'] \fB\-o\fR debuginfo.list]
[builddir]
.PP
The \fB\-g\fR flag says to use strip \fB\-g\fR instead of full strip on DSOs or EXEs.
The \fB\-\-g\-libs\fR flag says to use strip \fB\-g\fR instead of full strip ONLY on
DSOs.  Options \fB\-g\fR and \fB\-\-g\-libs\fR are mutually exclusive.
.PP
The \fB\-r\fR flag says to use eu\-strip \fB\-\-reloc\-debug\-sections\fR.
.PP
Use \fB\-\-keep\-section\fR SECTION or \fB\-\-remove\-section\fR SECTION to explicitly
keep a (non\-allocated) section in the main executable or explicitly
remove it into the .debug file. SECTION is an extended wildcard
pattern.  Both options can be given more than once.
.PP
The \fB\-\-strict\-build\-id\fR flag says to exit with failure status if
any ELF binary processed fails to contain a build\-id note.
.PP
The \fB\-m\fR flag says to include a .gnu_debugdata section in the main binary.
.PP
The \fB\-i\fR flag says to include a .gdb_index section in the .debug file.
.PP
The \fB\-n\fR flag says to not recompute the build\-id.
.PP
The \fB\-j\fR, \fB\-\-jobs\fR N option will spawn N processes to do the debuginfo
extraction in parallel.
.PP
A single \fB\-o\fR switch before any \fB\-l\fR or \fB\-p\fR switches simply renames
the primary output file from debugfiles.list to something else.
A \fB\-o\fR switch that follows a \fB\-p\fR switch or some \fB\-l\fR switches produces
an additional output file with the debuginfo for the files in
the \fB\-l\fR filelist file, or whose names match the \fB\-p\fR pattern.
The \fB\-p\fR argument is an grep \fB\-E\fR \fB\-style\fR regexp matching the a file name,
and must not use anchors (^ or $).
.PP
The \fB\-\-run\-dwz\fR flag instructs find\-debuginfo to run the dwz utility
if available, and \fB\-\-dwz\-low\-mem\-die\-limit\fR and \fB\-\-dwz\-max\-die\-limit\fR
provide detailed limits.  See dwz(1) \fB\-l\fR and \fB\-L\fR option for details.
Use \fB\-\-dwz\-single\-file\-mode\fR to disable multi\-file mode, see dwz(1) \fB\-m\fR
for more details.
.PP
If \fB\-\-build\-id\-seed\fR SEED is given then debugedit is called to
update the build\-ids it finds adding the SEED as seed to recalculate
the build\-id hash.  This makes sure the build\-ids in the ELF files
are unique between versions and releases of the same package.
(Use \fB\-\-build\-id\-seed\fR "%{VERSION}\-%{RELEASE}".)
.PP
If \fB\-\-unique\-debug\-suffix\fR SUFFIX is given then the debug files created
for <FILE> will be named <FILE>\-<SUFFIX>.debug.  This makes sure .debug
are unique between package version, release and architecture.
(Use \fB\-\-unique\-debug\-suffix\fR "\-%{VERSION}\-%{RELEASE}.%{_arch}".)
.PP
If \fB\-\-unique\-debug\-src\-base\fR BASE is given then the source directory
will be called /usr/debug/src/<BASE>.  This makes sure the debug source
dirs are unique between package version, release and achitecture (Use
\fB\-\-unique\-debug\-src\-base\fR "%{name}\-%{VERSION}\-%{RELEASE}.%{_arch}")
.PP
All file names in switches are relative to builddir ('.' if not given).
